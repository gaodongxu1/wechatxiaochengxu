<style lang="less">
  .allbacground {
  background-color: #F5F5F5;
  }

  .individual {
    display: flex;
    flex-direction: row;
    align-items: center;
    border-radius: 50%;
    justify-content: center;
    width: 82px;
    height: 87px;
    margin: 10px 2px 10px 2px;
  }

  .individual-layout {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #F5F5F5;
    width: 100%;
    height: 180px;
  }
  .box {
    display: flex;
    background-color: #fff;
  }

  .box-lr {
    flex-direction: row;
  }

  .box-tb {
    flex-direction: column;
  }

  .box-pack-between {
    justify-content: space-between;
  }

  .flex {
    flex-grow: 1;
  }

  .pink-color {
    color: #ff629a;
    background: #fff;
  }

  .fs28 {
    font-size: 28rpx;
  }

  .curtime {
    margin: 0px 0px 0px 12px;
  }
  
  .time-event {
    align-items: center;
  }
  
  .date-area {
    height: 70rpx;
    text-align: center;
    align-items: center;
    margin: 8px 0px 0px 12px;
  }

  
  .picker-btns {
    height: 120rpx;
    line-height: 120rpx;
    border-bottom: 1rpx solid #ff7ca0;
  }

  .picker-confirm {
    margin-right: 50rpx;
  }

  .picker-cancel {
    margin-left: 50rpx;
  }

  .picker-view {
    color: #ff7ca0;
    text-align: center;
  }
</style>

<template>
    <view class="allbacground" style="height: {{height}}px">
      <view class="individual-layout">
          <image class="individual" src="{{head}}"></image>
          <text>{{name}}</text>
      </view>

        <view class="pink-color">
            <view class="fs28 box box-lr time-event">
                <view  @tap="chooseYearAndMonthDate" class=" box box-lr curtime">时间:</view>
                <view  class="date-area box box-lr time-event" style="margin: 0px 0px 0px 10px;color:black;">{{curYear || "--"}} 年 {{curMonth || "--"}} 月 {{curDate || "--"}} 日</view>
            </view>
      <view style="width:100%;height:14px;background-color:#F5F5F5;margin:10px 0px 0px 0px;"></view>

          <view class="fs28 box box-lr time-event">
            <picker bindchange="choosedActive" value="{{index}}" range="{{Active}}">
              <view style= "display:flex; align-items: center;">
                <view class=" box box-lr curtime date-area time-event">事件:</view>
                <view style="margin: 4px 0px 0px 12px;color:black;">{{Active[index]}}</view>
              </view>
            </picker>
          </view>
        <view style="width:100%;height:14px;background-color:#F5F5F5;margin:10px 0px 0px 0px;"></view>

          <view class="fs28 box box-lr time-event">
            <view class=" box box-lr curtime time-event">日程:</view>
              <view>
                <form>
                <textarea style="color: black;" placeholder="具体事件" name="textarea" bindinput="onInput" />
                </form>
              </view>
          </view>

          <view style="width:100%;height:14px;background-color:#F5F5F5;margin:10px 0px 0px 0px;"></view>

          <view @tap="submit" class="date-area" style="color:grey;font-size: 32rpx;">提交</view>
        </view>
          
      <view wx:if="{{showPicker === true}}" class="box box-tb">
          <view class="picker-btns box box-lr box-pack-between ">
            <view class="picker-btn picker-cancel" data-type="cancel" @tap="tapPickerBtn">取消</view>
            <view class="picker-btn picker-confirm" data-type="confirm" @tap="tapPickerBtn">确定</view>
          </view>

          <picker-view class="flex" indicator-style="height: 50px;" style="width: 100%; height: 150px;" value="{{pickerValue}}" bindchange="pickerChange">
              <picker-view-column>
                <view class="picker-view" wx:for="{{pickerYear}}" wx:key="*this" style="line-height: 50px">{{item}}年</view>
              </picker-view-column>

                <picker-view-column>
                  <view class="picker-view" wx:for="{{pickerMonth}}" wx:key="*this" style="line-height: 50px">{{item}}月</view>
                </picker-view-column>

                  <picker-view-column>
                    <view class="picker-view" wx:for="{{pickerDate}}" wx:key="*this" style="line-height: 50px">{{item}}日</view>
                  </picker-view-column>
          </picker-view>
      </view>
      </view>
</template>

<script>
  import wepy from 'wepy'

  var chooseYear = null
  var chooseMonth = null
  var chooseDate = null
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '家务提醒小程序'
    }

    data = {
      showPicker: false,
      curYear: null,
      curMonth: null,
      curDate: null,
      days: null,
      pickerValue: null,
      pickerYear: null,
      pickerMonth: null,
      pickerDate: null,
      pickerEvent: null,
      Active: ['日食谱', '购物清单', '家务', '宝宝生活', '纪念日', '其他'],
      index: 0,
      width: 0,
      height: 0,
      textarea: ''
    }

    methods = {
      getThisMonthDays(year, month) {
        return new Date(year, month, 0).getDate()
      },
      calculateDays(self, year, month) {
        let days = []

        const thisMonthDays = self.methods.getThisMonthDays(year, month)
        for (let i = 1; i <= thisMonthDays; i++) {
          days.push({
            day: i,
            choosed: false
          })
        }

        self.days = days
      },

      chooseYearAndMonthDate() {
        let self = this
        const thisMonthDays = self.days.length
        const curYear = self.curYear
        const curMonth = self.curMonth
        const curDate = self.curDate
        let pickerYear = []
        let pickerMonth = []
        let pickerDate = []
        for (let i = 1900; i <= 2100; i++) {
          pickerYear.push(i)
        }
        for (let i = 1; i <= 12; i++) {
          pickerMonth.push(i)
        }
        for (let i = 1; i <= thisMonthDays; i++) {
          pickerDate.push(i)
        }
        const idxYear = pickerYear.indexOf(curYear)
        const idxMonth = pickerMonth.indexOf(curMonth)
        const idxDate = pickerDate.indexOf(curDate)

        self.pickerValue = [idxYear, idxMonth, idxDate]
        self.pickerYear = pickerYear
        self.pickerMonth = pickerMonth
        self.pickerDate = pickerDate
        self.showPicker = true
      },
      pickerChange(e) {
        let self = this
        const val = e.detail.value
        chooseYear = self.pickerYear[val[0]]
        chooseMonth = self.pickerMonth[val[1]]
        chooseDate = self.pickerDate[val[2]]
      },
      tapPickerBtn(e) {
        let self = this
        const type = e.currentTarget.dataset.type
        if (type === 'confirm') {
          self.curYear = chooseYear
          self.curMonth = chooseMonth
          self.curDate = chooseDate

          self.methods.calculateDays(self, chooseYear, chooseMonth, chooseDate)
        }

        self.showPicker = false
      },

      choosedActive(e) {
        let self = this
        self.index = e.detail.value
        this.setData({
          index: e.detail.value
        })
      },

      onInput(e) {
        let self = this

        self.textarea = e.detail.value
      },

      submit(e) {
        let self = this
        const now = `${self.curYear}年${self.curMonth}月${self.curDate}日`
        // console.log(now, self.Active[self.index], self.textarea)
        wepy.request({
          url: 'http://127.0.0.1:7001/build',
          method: 'POST',
          data: {
            yearmonthday: now,
            eventname: self.Active[self.index],
            arrange: self.textarea
          }
        })
      }
    }

    onLoad() {
      let self = this

      const date = new Date()
      const curYear = date.getFullYear()
      const curMonth = date.getMonth() + 1
      const curDate = date.getDate()

      self.methods.calculateDays(self, curYear, curMonth)

      self.curYear = curYear
      self.curMonth = curMonth
      self.curDate = curDate

      wepy.getSystemInfo({
        success(res) {
          self.height = res.windowHeight
          self.width = res.windowWidth
        }
      })

      wepy.getUserInfo({
        success: function(res) {
          self.name = res.userInfo.nickName
          self.head = res.userInfo.avatarUrl
          self.setData({
            head: res.userInfo.avatarUrl,
            name: res.userInfo.nickName
          })
        }
      })
    }
  }
</script>
