<style lang="less">
  .allbacground {
  background-color: #F5F5F5;
}

  .box {
    display: flex;
    background-color: #fff;
  }

  .box-lr {
    flex-direction: row;
  }

  .box-rl {
    flex-direction: row-reverse;
  }

  .box-tb {
    flex-direction: column;
  }

  .box-bt {
    flex-direction: column-reverse;
  }

  .box-pack-center {
    justify-content: center;
  }

  .box-pack-start {
    justify-content: flex-start;
  }

  .box-pack-end {
    justify-content: flex-end;
  }

  .box-pack-between {
    justify-content: space-between;
  }

  .box-pack-around {
    justify-content: space-around;
  }

  .box-align-center {
    align-items: center;
  }

  .box-align-start {
    align-items: flex-start;
  }

  .box-align-end {
    align-items: flex-end;
  }

  .self-align-center {
    align-self: center;
    margin: 0 auto;
  }

  .self-align-start {
    align-self: flex-start;
  }

  .self-align-end {
    align-self: flex-end;
  }

  .self-align-stretch {
    align-self: stretch;
  }

  .box-wrap {
    flex-wrap: wrap;
  }

  .box-nowrap {
    flex-wrap: nowrap;
  }

  .flex {
    flex-grow: 1;
  }

  .shrink {
    flex-shrink: 1;
  }

  .bg {
    background-image: linear-gradient(to bottom, #faefe7, #ffcbd7);
    overflow: hidden;
  }

  .brown-color {
    color: #784344;
  }

  .pink-color {
    color: #ff629a;
  }

  .white-color {
    color: #fff;
  }

  .fs24 {
    font-size: 24rpx;
  }

  .fs28 {
    font-size: 28rpx;
  }

  .fs32 {
    font-size: 32rpx;
  }

  .fs36 {
    font-size: 36rpx;
  }

  .top-handle {
    height: 80rpx;
  }

  .prev {
    text-align: right;
    height: 80rpx;
  }

  .next {
    height: 80rpx;
  }

  .prev-handle {
    width: 80rpx;
    height: 100%;
  }

  .next-handle {
    width: 80rpx;
    height: 100%;
  }

  .date-area {
    width: 50%;
    height: 80rpx;
    text-align: center;
  }

  .weeks {
    height: 50rpx;
    line-height: 50rpx;
    opacity: 0.5;
  }

  .week {
    text-align: center;
  }

  .days {
    height: 500rpx;
  }

  .grid {
    width: 107.1428571429rpx;
  }

  .day {
    width: 60rpx;
    height: 60rpx;
    color: #88d2ac;
    font-size: 26rpx;
    font-weight: 200;
  }

  .border-radius {
    border-radius: 50%;
    position: relative;
    left: 0;
    top: 0;
    color: #fff;
  }

  .pink-bg {
    background-color: #ff629a;
  }

  .holiday-position {
    display: flex;
    justify-content: space-between;
    margin: 0px 15px 8px 15px;
    align-items: center;
}
</style>

<template>
  <view class="allbacground" style="height: {{height}}px">
    <view class="flex box box-tb box-align-center">
      <view class="calendar pink-color box box-tb">
        <view class="top-handle fs28 box box-lr box-align-center box-pack-center">
          <view class="prev box box-rl" @tap="handleCalendar" data-handle="prev">
            <view class="prev-handle box box-lr box-align-center box-pack-center">《</view>
          </view>
            <view  class="date-area box box-lr box-align-center box-pack-center">{{curYear || "--"}} 年 {{curMonth || "--"}} 月 {{curDate || "--"}} 日</view>
              <view class="next box box-lr" @tap="handleCalendar" data-handle="next">
                <view class="next-handle box box-lr box-align-center box-pack-center">》</view>
              </view>
        </view>

          <view class="weeks box box-lr box-pack-center box-align-center">
            <view class="flex week fs28" wx:for="{{weeksCh}}" wx:key="{{index}}" data-idx="{{index}}">{{item}}</view>
          </view>
            <view class="days box box-lr box-wrap">
                <view wx:if="{{hasEmptyGrid}}" class="grid white-color box box-align-center box-pack-center" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}">
                </view>
                  <view class="grid white-color box box-align-center box-pack-center" wx:for="{{days}}" wx:key="{{index}}" data-idx="{{index}}">
                    <view class="day {{item.choosed ? 'border-radius pink-bg' : ''}} box box-align-center box-pack-center">{{item.day}}</view>
                  </view>
            </view>
      </view>
    </view>

    <block>
     <view>
      <view style="margin: 20px 15px 20px 15px;"><text style="font-size:16px;color:red;">{{Array[0].yearmonth}}</text></view>
      
       <view style="background-color: #fff;">
         <block wx:for="{{Array}}" wx:key="index">
            <view class="holiday-position">
                <view><text style="font-size:14px;">{{item.day}}</text></view>
                <view><text style="font-size:14px;">{{item.week}}</text></view>
                <view><text style="font-size:14px;">{{item.festival}}</text></view>
            </view>
         </block>
       </view>
     </view>
    </block>
  </view>
</template>

<script>
  import wepy from 'wepy'
  
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '家务提醒小程序'
    }

    data = {
      hasEmptyGrid: false,
      empytGrids: [],
      showPicker: false,
      curYear: null,
      curMonth: null,
      curDate: null,
      weeksCh: null,
      days: null,
      pickerValue: null,
      pickerYear: null,
      pickerMonth: null,
      pickerDate: null,
      width: 0,
      height: 0
    }

    methods = {
      getThisMonthDays(year, month) {
        return new Date(year, month, 0).getDate()
      },
      getFirstDayOfWeek(year, month) {
        return new Date(Date.UTC(year, month - 1, 1)).getDay()
      },
      calculateEmptyGrids(self, year, month) {
        const firstDayOfWeek = self.methods.getFirstDayOfWeek(year, month)
        let EmpytGrids = []
        if (firstDayOfWeek > 0) {
          for (let i = 1; i < firstDayOfWeek; i++) {
            EmpytGrids.push(i)
          }
          self.hasEmptyGrid = true
          self.empytGrids = EmpytGrids
        } else if (firstDayOfWeek === 0) {
          for (let i = 1; i < 7; i++) {
            EmpytGrids.push(i)
          }
          self.hasEmptyGrid = true
          self.empytGrids = EmpytGrids
        } else {
          self.hasEmptyGrid = false
          self.empytGrids = []
        }
      },
      calculateDays(self, year, month) {
        let days = []
        const TodayDate = (new Date()).getDate()

        const thisMonthDays = self.methods.getThisMonthDays(year, month)
        for (let i = 1; i <= thisMonthDays; i++) {
          days.push({
            day: i,
            choosed: false
          })
        }

        days[TodayDate - 1].choosed = true

        self.days = days
      },
      handleCalendar(e) {
        let self = this
        const handle = e.currentTarget.dataset.handle
        const curYear = self.curYear
        const curMonth = self.curMonth
        if (handle === 'prev') {
          let newMonth = curMonth - 1
          let newYear = curYear
          if (newMonth < 1) {
            newYear = curYear - 1
            newMonth = 12
          }

          self.methods.calculateDays(self, newYear, newMonth)
          self.methods.calculateEmptyGrids(self, newYear, newMonth)

          self.curYear = newYear
          self.curMonth = newMonth
        } else {
          let newMonth = curMonth + 1
          let newYear = curYear
          if (newMonth > 12) {
            newYear = curYear + 1
            newMonth = 1
          }

          self.methods.calculateDays(self, newYear, newMonth)
          self.methods.calculateEmptyGrids(self, newYear, newMonth)

          self.curYear = newYear
          self.curMonth = newMonth
        }
      }
    }

    onLoad() {
      let self = this

      const date = new Date()
      const curYear = date.getFullYear()
      const curMonth = date.getMonth() + 1
      const curDate = date.getDate()

      self.methods.calculateEmptyGrids(self, curYear, curMonth)
      self.methods.calculateDays(self, curYear, curMonth)

      self.curYear = curYear
      self.curMonth = curMonth
      self.curDate = curDate
      self.weeksCh = [ '一', '二', '三', '四', '五', '六', '日' ]

      wepy.getSystemInfo({
        success(res) {
          self.height = res.windowHeight
          self.width = res.windowWidth
        }
      })

      wepy.request({
        url: 'http://127.0.0.1:7001/select',
        method: 'POST',
        success: function (res) {
          self.Array = res.data
          self.setData({
            Array: res.data
          })
        }
      })
    }
  }
</script>
